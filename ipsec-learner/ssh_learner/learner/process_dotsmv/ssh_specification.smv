DEFINE isSilent := (out=NO_CONN);
DEFINE hasReqAuth := (inp=SR_AUTH & out=SR_ACCEPT);
DEFINE hasAuth := (out=UA_PW_OK);
DEFINE authReq := (inp=UA_PW_OK | inp=UA_PW_NOK);
DEFINE validAuthReq := (inp=UA_PW_OK);
DEFINE invalidAuthReq := (inp=UA_PW_NOK);
DEFINE receivedNewKeys := (out=NEWKEYS | out=KEX31_NEWKEYS);
DEFINE kexStarted := (out=KEXINIT);
-- DEFINE connLost:= out=NO_CONN | out=DISCONNECT;
DEFINE connLost:= out=NO_CONN;


-- General Properties
-- Once a connection is lost, it is lost for good
LTLSPEC NAME gen_one_conn := G (out=NO_CONN ->
    G isSilent)
    

    
-- Security Properties
-- Transport Layer Security
LTLSPEC NAME trans_sec := G ( hasReqAuth -> 
    O ( (inp=NEWKEYS & out=NO_RESP) & 
        O ( (inp=KEX30 & out=KEX31_NEWKEYS) & 
            O kexStarted ) ) )
            

-- Rekey properties
-- Pre-auth rekey is possible
LTLSPEC NAME pre-auth_rekey_pos := G ( hasReqAuth -> 
         X (inp=KEXINIT -> out=KEXINIT & X ( inp=KEX30 -> out=KEX31_NEWKEYS & X (inp=NEWKEYS -> out=NO_RESP) ) ) U 
         (connLost | hasAuth | kexStarted) | G X (inp=KEXINIT -> out=KEXINIT & X ( inp=KEX30 -> out=KEX31_NEWKEYS & X (inp=NEWKEYS -> out=NO_RESP) ) ) ) 


-- Functional Properties
--   Server sends DISCONNECT:    
--   The sender MUST NOT send or receive any data after this message, and
--   the recipient MUST NOT accept any data after receiving this message.
LTLSPEC NAME trans_disc := G (out=NO_CONN -> 
    X G (isSilent) )

---- After sending a KEXINIT, the other side should not send another KEXINIT or SR_ACCEPT until it has sent NEWKEYS        
LTLSPEC NAME trans_kexinit := G ( kexStarted -> 
    X ( ( (out!=SR_ACCEPT & !kexStarted) U receivedNewKeys |
    G (out!=SR_ACCEPT & !kexStarted) ) ) )
    
-- If the server rejects the service request, it SHOULD send an
-- appropriate SSH_MSG_DISCONNECT message and MUST disconnect. 
LTLSPEC NAME trans_sr := G ( (inp=SR_AUTH & out!=NO_CONN & state!=s0) -> 
    (out=SR_ACCEPT | out=NO_CONN ) )
    
-- If the server rejects the authentication request, it MUST respond
-- with the following: SSH_MSG_USERAUTH_FAILURE. *It may also disconnect on failed unauth attempts
LTLSPEC NAME auth_ua_pre := G ( (hasReqAuth & !O out=UA_SUCCESS_GLOBAL_REQUEST) ->
    ( (invalidAuthReq -> (out=UA_FAILURE) ) U (out=UA_SUCCESS_GLOBAL_REQUEST | connLost| kexStarted ) ) | G (invalidAuthReq -> (out=UA_FAILURE | out=NO_CONN) ) )

-- SSH_MSG_USERAUTH_SUCCESS MUST be sent only once. 
LTLSPEC NAME auth_ua_post := G ( (out=UA_SUCCESS_GLOBAL_REQUEST) ->
    X G (out!=UA_SUCCESS_GLOBAL_REQUEST) )

-- When SSH_MSG_USERAUTH_SUCCESS has been sent, any further authentication
-- requests received after that SHOULD be silently ignored. *openssh sends UNIMPL, is that bad?    
LTLSPEC NAME auth_ua_post_strong := G (out=UA_SUCCESS_GLOBAL_REQUEST ->
     X ( ( authReq -> out=NO_RESP) U (!authReq & (kexStarted | connLost) ) | G (authReq -> out=NO_RESP) ) ) 