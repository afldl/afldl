MODULE main
VAR state : {s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28};
inp : {UA_PK_NOK, KEX30, SR_AUTH, SR_CONN, NEWKEYS, CH_REQUEST_PTY, CH_OPEN, CH_DATA, UA_PK_OK, KEXINIT_PROCEED, CH_CLOSE, KEXINIT, CH_EOF};
out : {KEXINIT, KEXINIT_UNIMPL, CH_NONE, NO_CONN, CH_MAX, KEX31_NEWKEYS, UNIMPL, NO_RESP, UA_FAILURE, SR_ACCEPT, UA_SUCCESS, CH_OPEN_SUCCESS, CH_SUCCESS, CH_EOF};
ASSIGN
init(state) := s0;
next(state) := case
state = s0 & inp = UA_PK_NOK: s1;
state = s0 & inp = KEX30: s3;
state = s0 & inp = SR_AUTH: s1;
state = s0 & inp = SR_CONN: s1;
state = s0 & inp = NEWKEYS: s3;
state = s0 & inp = CH_REQUEST_PTY: s0;
state = s0 & inp = CH_OPEN: s2;
state = s0 & inp = CH_DATA: s0;
state = s0 & inp = UA_PK_OK: s1;
state = s0 & inp = KEXINIT_PROCEED: s4;
state = s0 & inp = CH_CLOSE: s0;
state = s0 & inp = KEXINIT: s3;
state = s0 & inp = CH_EOF: s0;
state = s1 & inp = UA_PK_NOK: s1;
state = s1 & inp = KEX30: s1;
state = s1 & inp = SR_AUTH: s1;
state = s1 & inp = SR_CONN: s1;
state = s1 & inp = NEWKEYS: s1;
state = s1 & inp = CH_REQUEST_PTY: s1;
state = s1 & inp = CH_OPEN: s2;
state = s1 & inp = CH_DATA: s1;
state = s1 & inp = UA_PK_OK: s1;
state = s1 & inp = KEXINIT_PROCEED: s1;
state = s1 & inp = CH_CLOSE: s1;
state = s1 & inp = KEXINIT: s1;
state = s1 & inp = CH_EOF: s1;
state = s2 & inp = UA_PK_NOK: s2;
state = s2 & inp = KEX30: s2;
state = s2 & inp = SR_AUTH: s2;
state = s2 & inp = SR_CONN: s2;
state = s2 & inp = NEWKEYS: s2;
state = s2 & inp = CH_REQUEST_PTY: s2;
state = s2 & inp = CH_OPEN: s2;
state = s2 & inp = CH_DATA: s2;
state = s2 & inp = UA_PK_OK: s2;
state = s2 & inp = KEXINIT_PROCEED: s2;
state = s2 & inp = CH_CLOSE: s1;
state = s2 & inp = KEXINIT: s2;
state = s2 & inp = CH_EOF: s2;
state = s3 & inp = UA_PK_NOK: s1;
state = s3 & inp = KEX30: s5;
state = s3 & inp = SR_AUTH: s1;
state = s3 & inp = SR_CONN: s1;
state = s3 & inp = NEWKEYS: s3;
state = s3 & inp = CH_REQUEST_PTY: s3;
state = s3 & inp = CH_OPEN: s2;
state = s3 & inp = CH_DATA: s3;
state = s3 & inp = UA_PK_OK: s1;
state = s3 & inp = KEXINIT_PROCEED: s1;
state = s3 & inp = CH_CLOSE: s3;
state = s3 & inp = KEXINIT: s1;
state = s3 & inp = CH_EOF: s3;
state = s4 & inp = UA_PK_NOK: s1;
state = s4 & inp = KEX30: s3;
state = s4 & inp = SR_AUTH: s1;
state = s4 & inp = SR_CONN: s1;
state = s4 & inp = NEWKEYS: s4;
state = s4 & inp = CH_REQUEST_PTY: s4;
state = s4 & inp = CH_OPEN: s2;
state = s4 & inp = CH_DATA: s4;
state = s4 & inp = UA_PK_OK: s1;
state = s4 & inp = KEXINIT_PROCEED: s1;
state = s4 & inp = CH_CLOSE: s4;
state = s4 & inp = KEXINIT: s1;
state = s4 & inp = CH_EOF: s4;
state = s5 & inp = UA_PK_NOK: s1;
state = s5 & inp = KEX30: s5;
state = s5 & inp = SR_AUTH: s1;
state = s5 & inp = SR_CONN: s1;
state = s5 & inp = NEWKEYS: s6;
state = s5 & inp = CH_REQUEST_PTY: s5;
state = s5 & inp = CH_OPEN: s2;
state = s5 & inp = CH_DATA: s5;
state = s5 & inp = UA_PK_OK: s1;
state = s5 & inp = KEXINIT_PROCEED: s1;
state = s5 & inp = CH_CLOSE: s5;
state = s5 & inp = KEXINIT: s1;
state = s5 & inp = CH_EOF: s5;
state = s6 & inp = UA_PK_NOK: s6;
state = s6 & inp = KEX30: s1;
state = s6 & inp = SR_AUTH: s6;
state = s6 & inp = SR_CONN: s1;
state = s6 & inp = NEWKEYS: s1;
state = s6 & inp = CH_REQUEST_PTY: s6;
state = s6 & inp = CH_OPEN: s2;
state = s6 & inp = CH_DATA: s6;
state = s6 & inp = UA_PK_OK: s8;
state = s6 & inp = KEXINIT_PROCEED: s9;
state = s6 & inp = CH_CLOSE: s6;
state = s6 & inp = KEXINIT: s7;
state = s6 & inp = CH_EOF: s6;
state = s7 & inp = UA_PK_NOK: s1;
state = s7 & inp = KEX30: s5;
state = s7 & inp = SR_AUTH: s1;
state = s7 & inp = SR_CONN: s1;
state = s7 & inp = NEWKEYS: s1;
state = s7 & inp = CH_REQUEST_PTY: s7;
state = s7 & inp = CH_OPEN: s2;
state = s7 & inp = CH_DATA: s7;
state = s7 & inp = UA_PK_OK: s1;
state = s7 & inp = KEXINIT_PROCEED: s1;
state = s7 & inp = CH_CLOSE: s7;
state = s7 & inp = KEXINIT: s1;
state = s7 & inp = CH_EOF: s7;
state = s8 & inp = UA_PK_NOK: s8;
state = s8 & inp = KEX30: s1;
state = s8 & inp = SR_AUTH: s8;
state = s8 & inp = SR_CONN: s8;
state = s8 & inp = NEWKEYS: s1;
state = s8 & inp = CH_REQUEST_PTY: s8;
state = s8 & inp = CH_OPEN: s12;
state = s8 & inp = CH_DATA: s8;
state = s8 & inp = UA_PK_OK: s8;
state = s8 & inp = KEXINIT_PROCEED: s11;
state = s8 & inp = CH_CLOSE: s8;
state = s8 & inp = KEXINIT: s10;
state = s8 & inp = CH_EOF: s8;
state = s9 & inp = UA_PK_NOK: s1;
state = s9 & inp = KEX30: s7;
state = s9 & inp = SR_AUTH: s1;
state = s9 & inp = SR_CONN: s1;
state = s9 & inp = NEWKEYS: s1;
state = s9 & inp = CH_REQUEST_PTY: s9;
state = s9 & inp = CH_OPEN: s2;
state = s9 & inp = CH_DATA: s9;
state = s9 & inp = UA_PK_OK: s1;
state = s9 & inp = KEXINIT_PROCEED: s1;
state = s9 & inp = CH_CLOSE: s9;
state = s9 & inp = KEXINIT: s1;
state = s9 & inp = CH_EOF: s9;
state = s10 & inp = UA_PK_NOK: s1;
state = s10 & inp = KEX30: s13;
state = s10 & inp = SR_AUTH: s1;
state = s10 & inp = SR_CONN: s1;
state = s10 & inp = NEWKEYS: s1;
state = s10 & inp = CH_REQUEST_PTY: s10;
state = s10 & inp = CH_OPEN: s2;
state = s10 & inp = CH_DATA: s10;
state = s10 & inp = UA_PK_OK: s1;
state = s10 & inp = KEXINIT_PROCEED: s1;
state = s10 & inp = CH_CLOSE: s10;
state = s10 & inp = KEXINIT: s1;
state = s10 & inp = CH_EOF: s10;
state = s11 & inp = UA_PK_NOK: s1;
state = s11 & inp = KEX30: s10;
state = s11 & inp = SR_AUTH: s1;
state = s11 & inp = SR_CONN: s1;
state = s11 & inp = NEWKEYS: s1;
state = s11 & inp = CH_REQUEST_PTY: s11;
state = s11 & inp = CH_OPEN: s2;
state = s11 & inp = CH_DATA: s11;
state = s11 & inp = UA_PK_OK: s1;
state = s11 & inp = KEXINIT_PROCEED: s1;
state = s11 & inp = CH_CLOSE: s11;
state = s11 & inp = KEXINIT: s1;
state = s11 & inp = CH_EOF: s11;
state = s12 & inp = UA_PK_NOK: s12;
state = s12 & inp = KEX30: s2;
state = s12 & inp = SR_AUTH: s12;
state = s12 & inp = SR_CONN: s12;
state = s12 & inp = NEWKEYS: s2;
state = s12 & inp = CH_REQUEST_PTY: s17;
state = s12 & inp = CH_OPEN: s12;
state = s12 & inp = CH_DATA: s12;
state = s12 & inp = UA_PK_OK: s12;
state = s12 & inp = KEXINIT_PROCEED: s16;
state = s12 & inp = CH_CLOSE: s8;
state = s12 & inp = KEXINIT: s15;
state = s12 & inp = CH_EOF: s14;
state = s13 & inp = UA_PK_NOK: s1;
state = s13 & inp = KEX30: s13;
state = s13 & inp = SR_AUTH: s1;
state = s13 & inp = SR_CONN: s1;
state = s13 & inp = NEWKEYS: s8;
state = s13 & inp = CH_REQUEST_PTY: s13;
state = s13 & inp = CH_OPEN: s2;
state = s13 & inp = CH_DATA: s13;
state = s13 & inp = UA_PK_OK: s1;
state = s13 & inp = KEXINIT_PROCEED: s1;
state = s13 & inp = CH_CLOSE: s13;
state = s13 & inp = KEXINIT: s1;
state = s13 & inp = CH_EOF: s13;
state = s14 & inp = UA_PK_NOK: s14;
state = s14 & inp = KEX30: s2;
state = s14 & inp = SR_AUTH: s14;
state = s14 & inp = SR_CONN: s14;
state = s14 & inp = NEWKEYS: s2;
state = s14 & inp = CH_REQUEST_PTY: s19;
state = s14 & inp = CH_OPEN: s14;
state = s14 & inp = CH_DATA: s2;
state = s14 & inp = UA_PK_OK: s14;
state = s14 & inp = KEXINIT_PROCEED: s20;
state = s14 & inp = CH_CLOSE: s8;
state = s14 & inp = KEXINIT: s18;
state = s14 & inp = CH_EOF: s14;
state = s15 & inp = UA_PK_NOK: s2;
state = s15 & inp = KEX30: s21;
state = s15 & inp = SR_AUTH: s2;
state = s15 & inp = SR_CONN: s2;
state = s15 & inp = NEWKEYS: s2;
state = s15 & inp = CH_REQUEST_PTY: s2;
state = s15 & inp = CH_OPEN: s15;
state = s15 & inp = CH_DATA: s2;
state = s15 & inp = UA_PK_OK: s2;
state = s15 & inp = KEXINIT_PROCEED: s2;
state = s15 & inp = CH_CLOSE: s1;
state = s15 & inp = KEXINIT: s2;
state = s15 & inp = CH_EOF: s2;
state = s16 & inp = UA_PK_NOK: s2;
state = s16 & inp = KEX30: s15;
state = s16 & inp = SR_AUTH: s2;
state = s16 & inp = SR_CONN: s2;
state = s16 & inp = NEWKEYS: s2;
state = s16 & inp = CH_REQUEST_PTY: s2;
state = s16 & inp = CH_OPEN: s16;
state = s16 & inp = CH_DATA: s2;
state = s16 & inp = UA_PK_OK: s2;
state = s16 & inp = KEXINIT_PROCEED: s2;
state = s16 & inp = CH_CLOSE: s1;
state = s16 & inp = KEXINIT: s2;
state = s16 & inp = CH_EOF: s2;
state = s17 & inp = UA_PK_NOK: s17;
state = s17 & inp = KEX30: s2;
state = s17 & inp = SR_AUTH: s17;
state = s17 & inp = SR_CONN: s17;
state = s17 & inp = NEWKEYS: s2;
state = s17 & inp = CH_REQUEST_PTY: s2;
state = s17 & inp = CH_OPEN: s17;
state = s17 & inp = CH_DATA: s17;
state = s17 & inp = UA_PK_OK: s17;
state = s17 & inp = KEXINIT_PROCEED: s22;
state = s17 & inp = CH_CLOSE: s8;
state = s17 & inp = KEXINIT: s23;
state = s17 & inp = CH_EOF: s19;
state = s18 & inp = UA_PK_NOK: s2;
state = s18 & inp = KEX30: s24;
state = s18 & inp = SR_AUTH: s2;
state = s18 & inp = SR_CONN: s2;
state = s18 & inp = NEWKEYS: s2;
state = s18 & inp = CH_REQUEST_PTY: s2;
state = s18 & inp = CH_OPEN: s18;
state = s18 & inp = CH_DATA: s2;
state = s18 & inp = UA_PK_OK: s2;
state = s18 & inp = KEXINIT_PROCEED: s2;
state = s18 & inp = CH_CLOSE: s1;
state = s18 & inp = KEXINIT: s2;
state = s18 & inp = CH_EOF: s2;
state = s19 & inp = UA_PK_NOK: s19;
state = s19 & inp = KEX30: s2;
state = s19 & inp = SR_AUTH: s19;
state = s19 & inp = SR_CONN: s19;
state = s19 & inp = NEWKEYS: s2;
state = s19 & inp = CH_REQUEST_PTY: s2;
state = s19 & inp = CH_OPEN: s19;
state = s19 & inp = CH_DATA: s2;
state = s19 & inp = UA_PK_OK: s19;
state = s19 & inp = KEXINIT_PROCEED: s25;
state = s19 & inp = CH_CLOSE: s8;
state = s19 & inp = KEXINIT: s26;
state = s19 & inp = CH_EOF: s19;
state = s20 & inp = UA_PK_NOK: s2;
state = s20 & inp = KEX30: s18;
state = s20 & inp = SR_AUTH: s2;
state = s20 & inp = SR_CONN: s2;
state = s20 & inp = NEWKEYS: s2;
state = s20 & inp = CH_REQUEST_PTY: s2;
state = s20 & inp = CH_OPEN: s20;
state = s20 & inp = CH_DATA: s2;
state = s20 & inp = UA_PK_OK: s2;
state = s20 & inp = KEXINIT_PROCEED: s2;
state = s20 & inp = CH_CLOSE: s1;
state = s20 & inp = KEXINIT: s2;
state = s20 & inp = CH_EOF: s2;
state = s21 & inp = UA_PK_NOK: s2;
state = s21 & inp = KEX30: s21;
state = s21 & inp = SR_AUTH: s2;
state = s21 & inp = SR_CONN: s2;
state = s21 & inp = NEWKEYS: s12;
state = s21 & inp = CH_REQUEST_PTY: s2;
state = s21 & inp = CH_OPEN: s21;
state = s21 & inp = CH_DATA: s2;
state = s21 & inp = UA_PK_OK: s2;
state = s21 & inp = KEXINIT_PROCEED: s2;
state = s21 & inp = CH_CLOSE: s1;
state = s21 & inp = KEXINIT: s2;
state = s21 & inp = CH_EOF: s2;
state = s22 & inp = UA_PK_NOK: s2;
state = s22 & inp = KEX30: s23;
state = s22 & inp = SR_AUTH: s2;
state = s22 & inp = SR_CONN: s2;
state = s22 & inp = NEWKEYS: s2;
state = s22 & inp = CH_REQUEST_PTY: s2;
state = s22 & inp = CH_OPEN: s22;
state = s22 & inp = CH_DATA: s2;
state = s22 & inp = UA_PK_OK: s2;
state = s22 & inp = KEXINIT_PROCEED: s2;
state = s22 & inp = CH_CLOSE: s1;
state = s22 & inp = KEXINIT: s2;
state = s22 & inp = CH_EOF: s2;
state = s23 & inp = UA_PK_NOK: s2;
state = s23 & inp = KEX30: s27;
state = s23 & inp = SR_AUTH: s2;
state = s23 & inp = SR_CONN: s2;
state = s23 & inp = NEWKEYS: s2;
state = s23 & inp = CH_REQUEST_PTY: s2;
state = s23 & inp = CH_OPEN: s23;
state = s23 & inp = CH_DATA: s2;
state = s23 & inp = UA_PK_OK: s2;
state = s23 & inp = KEXINIT_PROCEED: s2;
state = s23 & inp = CH_CLOSE: s1;
state = s23 & inp = KEXINIT: s2;
state = s23 & inp = CH_EOF: s2;
state = s24 & inp = UA_PK_NOK: s2;
state = s24 & inp = KEX30: s24;
state = s24 & inp = SR_AUTH: s2;
state = s24 & inp = SR_CONN: s2;
state = s24 & inp = NEWKEYS: s14;
state = s24 & inp = CH_REQUEST_PTY: s2;
state = s24 & inp = CH_OPEN: s24;
state = s24 & inp = CH_DATA: s2;
state = s24 & inp = UA_PK_OK: s2;
state = s24 & inp = KEXINIT_PROCEED: s2;
state = s24 & inp = CH_CLOSE: s1;
state = s24 & inp = KEXINIT: s2;
state = s24 & inp = CH_EOF: s2;
state = s25 & inp = UA_PK_NOK: s2;
state = s25 & inp = KEX30: s26;
state = s25 & inp = SR_AUTH: s2;
state = s25 & inp = SR_CONN: s2;
state = s25 & inp = NEWKEYS: s2;
state = s25 & inp = CH_REQUEST_PTY: s2;
state = s25 & inp = CH_OPEN: s25;
state = s25 & inp = CH_DATA: s2;
state = s25 & inp = UA_PK_OK: s2;
state = s25 & inp = KEXINIT_PROCEED: s2;
state = s25 & inp = CH_CLOSE: s1;
state = s25 & inp = KEXINIT: s2;
state = s25 & inp = CH_EOF: s2;
state = s26 & inp = UA_PK_NOK: s2;
state = s26 & inp = KEX30: s28;
state = s26 & inp = SR_AUTH: s2;
state = s26 & inp = SR_CONN: s2;
state = s26 & inp = NEWKEYS: s2;
state = s26 & inp = CH_REQUEST_PTY: s2;
state = s26 & inp = CH_OPEN: s26;
state = s26 & inp = CH_DATA: s2;
state = s26 & inp = UA_PK_OK: s2;
state = s26 & inp = KEXINIT_PROCEED: s2;
state = s26 & inp = CH_CLOSE: s1;
state = s26 & inp = KEXINIT: s2;
state = s26 & inp = CH_EOF: s2;
state = s27 & inp = UA_PK_NOK: s2;
state = s27 & inp = KEX30: s27;
state = s27 & inp = SR_AUTH: s2;
state = s27 & inp = SR_CONN: s2;
state = s27 & inp = NEWKEYS: s17;
state = s27 & inp = CH_REQUEST_PTY: s2;
state = s27 & inp = CH_OPEN: s27;
state = s27 & inp = CH_DATA: s2;
state = s27 & inp = UA_PK_OK: s2;
state = s27 & inp = KEXINIT_PROCEED: s2;
state = s27 & inp = CH_CLOSE: s1;
state = s27 & inp = KEXINIT: s2;
state = s27 & inp = CH_EOF: s2;
state = s28 & inp = UA_PK_NOK: s2;
state = s28 & inp = KEX30: s28;
state = s28 & inp = SR_AUTH: s2;
state = s28 & inp = SR_CONN: s2;
state = s28 & inp = NEWKEYS: s19;
state = s28 & inp = CH_REQUEST_PTY: s2;
state = s28 & inp = CH_OPEN: s28;
state = s28 & inp = CH_DATA: s2;
state = s28 & inp = UA_PK_OK: s2;
state = s28 & inp = KEXINIT_PROCEED: s2;
state = s28 & inp = CH_CLOSE: s1;
state = s28 & inp = KEXINIT: s2;
state = s28 & inp = CH_EOF: s2;
esac;
out := case
state = s0 & inp = UA_PK_NOK: KEXINIT;
state = s0 & inp = KEX30: KEXINIT_UNIMPL;
state = s0 & inp = SR_AUTH: KEXINIT;
state = s0 & inp = SR_CONN: KEXINIT;
state = s0 & inp = NEWKEYS: KEXINIT_UNIMPL;
state = s0 & inp = CH_REQUEST_PTY: CH_NONE;
state = s0 & inp = CH_OPEN: KEXINIT;
state = s0 & inp = CH_DATA: CH_NONE;
state = s0 & inp = UA_PK_OK: KEXINIT;
state = s0 & inp = KEXINIT_PROCEED: KEXINIT;
state = s0 & inp = CH_CLOSE: CH_NONE;
state = s0 & inp = KEXINIT: KEXINIT;
state = s0 & inp = CH_EOF: CH_NONE;
state = s1 & inp = UA_PK_NOK: NO_CONN;
state = s1 & inp = KEX30: NO_CONN;
state = s1 & inp = SR_AUTH: NO_CONN;
state = s1 & inp = SR_CONN: NO_CONN;
state = s1 & inp = NEWKEYS: NO_CONN;
state = s1 & inp = CH_REQUEST_PTY: CH_NONE;
state = s1 & inp = CH_OPEN: NO_CONN;
state = s1 & inp = CH_DATA: CH_NONE;
state = s1 & inp = UA_PK_OK: NO_CONN;
state = s1 & inp = KEXINIT_PROCEED: NO_CONN;
state = s1 & inp = CH_CLOSE: CH_NONE;
state = s1 & inp = KEXINIT: NO_CONN;
state = s1 & inp = CH_EOF: CH_NONE;
state = s2 & inp = UA_PK_NOK: NO_CONN;
state = s2 & inp = KEX30: NO_CONN;
state = s2 & inp = SR_AUTH: NO_CONN;
state = s2 & inp = SR_CONN: NO_CONN;
state = s2 & inp = NEWKEYS: NO_CONN;
state = s2 & inp = CH_REQUEST_PTY: NO_CONN;
state = s2 & inp = CH_OPEN: CH_MAX;
state = s2 & inp = CH_DATA: NO_CONN;
state = s2 & inp = UA_PK_OK: NO_CONN;
state = s2 & inp = KEXINIT_PROCEED: NO_CONN;
state = s2 & inp = CH_CLOSE: NO_CONN;
state = s2 & inp = KEXINIT: NO_CONN;
state = s2 & inp = CH_EOF: NO_CONN;
state = s3 & inp = UA_PK_NOK: NO_CONN;
state = s3 & inp = KEX30: KEX31_NEWKEYS;
state = s3 & inp = SR_AUTH: NO_CONN;
state = s3 & inp = SR_CONN: NO_CONN;
state = s3 & inp = NEWKEYS: UNIMPL;
state = s3 & inp = CH_REQUEST_PTY: CH_NONE;
state = s3 & inp = CH_OPEN: NO_CONN;
state = s3 & inp = CH_DATA: CH_NONE;
state = s3 & inp = UA_PK_OK: NO_CONN;
state = s3 & inp = KEXINIT_PROCEED: NO_CONN;
state = s3 & inp = CH_CLOSE: CH_NONE;
state = s3 & inp = KEXINIT: NO_CONN;
state = s3 & inp = CH_EOF: CH_NONE;
state = s4 & inp = UA_PK_NOK: NO_CONN;
state = s4 & inp = KEX30: NO_RESP;
state = s4 & inp = SR_AUTH: NO_CONN;
state = s4 & inp = SR_CONN: NO_CONN;
state = s4 & inp = NEWKEYS: UNIMPL;
state = s4 & inp = CH_REQUEST_PTY: CH_NONE;
state = s4 & inp = CH_OPEN: NO_CONN;
state = s4 & inp = CH_DATA: CH_NONE;
state = s4 & inp = UA_PK_OK: NO_CONN;
state = s4 & inp = KEXINIT_PROCEED: NO_CONN;
state = s4 & inp = CH_CLOSE: CH_NONE;
state = s4 & inp = KEXINIT: NO_CONN;
state = s4 & inp = CH_EOF: CH_NONE;
state = s5 & inp = UA_PK_NOK: NO_CONN;
state = s5 & inp = KEX30: UNIMPL;
state = s5 & inp = SR_AUTH: NO_CONN;
state = s5 & inp = SR_CONN: NO_CONN;
state = s5 & inp = NEWKEYS: NO_RESP;
state = s5 & inp = CH_REQUEST_PTY: CH_NONE;
state = s5 & inp = CH_OPEN: NO_CONN;
state = s5 & inp = CH_DATA: CH_NONE;
state = s5 & inp = UA_PK_OK: NO_CONN;
state = s5 & inp = KEXINIT_PROCEED: NO_CONN;
state = s5 & inp = CH_CLOSE: CH_NONE;
state = s5 & inp = KEXINIT: NO_CONN;
state = s5 & inp = CH_EOF: CH_NONE;
state = s6 & inp = UA_PK_NOK: UA_FAILURE;
state = s6 & inp = KEX30: NO_CONN;
state = s6 & inp = SR_AUTH: SR_ACCEPT;
state = s6 & inp = SR_CONN: NO_CONN;
state = s6 & inp = NEWKEYS: NO_CONN;
state = s6 & inp = CH_REQUEST_PTY: CH_NONE;
state = s6 & inp = CH_OPEN: NO_CONN;
state = s6 & inp = CH_DATA: CH_NONE;
state = s6 & inp = UA_PK_OK: UA_SUCCESS;
state = s6 & inp = KEXINIT_PROCEED: KEXINIT;
state = s6 & inp = CH_CLOSE: CH_NONE;
state = s6 & inp = KEXINIT: KEXINIT;
state = s6 & inp = CH_EOF: CH_NONE;
state = s7 & inp = UA_PK_NOK: NO_CONN;
state = s7 & inp = KEX30: KEX31_NEWKEYS;
state = s7 & inp = SR_AUTH: NO_CONN;
state = s7 & inp = SR_CONN: NO_CONN;
state = s7 & inp = NEWKEYS: UNIMPL;
state = s7 & inp = CH_REQUEST_PTY: CH_NONE;
state = s7 & inp = CH_OPEN: NO_CONN;
state = s7 & inp = CH_DATA: CH_NONE;
state = s7 & inp = UA_PK_OK: NO_CONN;
state = s7 & inp = KEXINIT_PROCEED: NO_CONN;
state = s7 & inp = CH_CLOSE: CH_NONE;
state = s7 & inp = KEXINIT: NO_CONN;
state = s7 & inp = CH_EOF: CH_NONE;
state = s8 & inp = UA_PK_NOK: NO_RESP;
state = s8 & inp = KEX30: NO_CONN;
state = s8 & inp = SR_AUTH: SR_ACCEPT;
state = s8 & inp = SR_CONN: SR_ACCEPT;
state = s8 & inp = NEWKEYS: NO_CONN;
state = s8 & inp = CH_REQUEST_PTY: CH_NONE;
state = s8 & inp = CH_OPEN: CH_OPEN_SUCCESS;
state = s8 & inp = CH_DATA: CH_NONE;
state = s8 & inp = UA_PK_OK: NO_RESP;
state = s8 & inp = KEXINIT_PROCEED: KEXINIT;
state = s8 & inp = CH_CLOSE: CH_NONE;
state = s8 & inp = KEXINIT: KEXINIT;
state = s8 & inp = CH_EOF: CH_NONE;
state = s9 & inp = UA_PK_NOK: NO_CONN;
state = s9 & inp = KEX30: NO_RESP;
state = s9 & inp = SR_AUTH: NO_CONN;
state = s9 & inp = SR_CONN: NO_CONN;
state = s9 & inp = NEWKEYS: UNIMPL;
state = s9 & inp = CH_REQUEST_PTY: CH_NONE;
state = s9 & inp = CH_OPEN: NO_CONN;
state = s9 & inp = CH_DATA: CH_NONE;
state = s9 & inp = UA_PK_OK: NO_CONN;
state = s9 & inp = KEXINIT_PROCEED: NO_CONN;
state = s9 & inp = CH_CLOSE: CH_NONE;
state = s9 & inp = KEXINIT: NO_CONN;
state = s9 & inp = CH_EOF: CH_NONE;
state = s10 & inp = UA_PK_NOK: NO_CONN;
state = s10 & inp = KEX30: KEX31_NEWKEYS;
state = s10 & inp = SR_AUTH: NO_CONN;
state = s10 & inp = SR_CONN: NO_CONN;
state = s10 & inp = NEWKEYS: UNIMPL;
state = s10 & inp = CH_REQUEST_PTY: CH_NONE;
state = s10 & inp = CH_OPEN: NO_CONN;
state = s10 & inp = CH_DATA: CH_NONE;
state = s10 & inp = UA_PK_OK: NO_CONN;
state = s10 & inp = KEXINIT_PROCEED: NO_CONN;
state = s10 & inp = CH_CLOSE: CH_NONE;
state = s10 & inp = KEXINIT: NO_CONN;
state = s10 & inp = CH_EOF: CH_NONE;
state = s11 & inp = UA_PK_NOK: NO_CONN;
state = s11 & inp = KEX30: NO_RESP;
state = s11 & inp = SR_AUTH: NO_CONN;
state = s11 & inp = SR_CONN: NO_CONN;
state = s11 & inp = NEWKEYS: UNIMPL;
state = s11 & inp = CH_REQUEST_PTY: CH_NONE;
state = s11 & inp = CH_OPEN: NO_CONN;
state = s11 & inp = CH_DATA: CH_NONE;
state = s11 & inp = UA_PK_OK: NO_CONN;
state = s11 & inp = KEXINIT_PROCEED: NO_CONN;
state = s11 & inp = CH_CLOSE: CH_NONE;
state = s11 & inp = KEXINIT: NO_CONN;
state = s11 & inp = CH_EOF: CH_NONE;
state = s12 & inp = UA_PK_NOK: NO_RESP;
state = s12 & inp = KEX30: NO_CONN;
state = s12 & inp = SR_AUTH: SR_ACCEPT;
state = s12 & inp = SR_CONN: SR_ACCEPT;
state = s12 & inp = NEWKEYS: NO_CONN;
state = s12 & inp = CH_REQUEST_PTY: CH_SUCCESS;
state = s12 & inp = CH_OPEN: CH_MAX;
state = s12 & inp = CH_DATA: NO_RESP;
state = s12 & inp = UA_PK_OK: NO_RESP;
state = s12 & inp = KEXINIT_PROCEED: KEXINIT;
state = s12 & inp = CH_CLOSE: CH_EOF;
state = s12 & inp = KEXINIT: KEXINIT;
state = s12 & inp = CH_EOF: CH_EOF;
state = s13 & inp = UA_PK_NOK: NO_CONN;
state = s13 & inp = KEX30: UNIMPL;
state = s13 & inp = SR_AUTH: NO_CONN;
state = s13 & inp = SR_CONN: NO_CONN;
state = s13 & inp = NEWKEYS: NO_RESP;
state = s13 & inp = CH_REQUEST_PTY: CH_NONE;
state = s13 & inp = CH_OPEN: NO_CONN;
state = s13 & inp = CH_DATA: CH_NONE;
state = s13 & inp = UA_PK_OK: NO_CONN;
state = s13 & inp = KEXINIT_PROCEED: NO_CONN;
state = s13 & inp = CH_CLOSE: CH_NONE;
state = s13 & inp = KEXINIT: NO_CONN;
state = s13 & inp = CH_EOF: CH_NONE;
state = s14 & inp = UA_PK_NOK: NO_RESP;
state = s14 & inp = KEX30: NO_CONN;
state = s14 & inp = SR_AUTH: SR_ACCEPT;
state = s14 & inp = SR_CONN: SR_ACCEPT;
state = s14 & inp = NEWKEYS: NO_CONN;
state = s14 & inp = CH_REQUEST_PTY: CH_SUCCESS;
state = s14 & inp = CH_OPEN: CH_MAX;
state = s14 & inp = CH_DATA: NO_CONN;
state = s14 & inp = UA_PK_OK: NO_RESP;
state = s14 & inp = KEXINIT_PROCEED: KEXINIT;
state = s14 & inp = CH_CLOSE: NO_RESP;
state = s14 & inp = KEXINIT: KEXINIT;
state = s14 & inp = CH_EOF: NO_RESP;
state = s15 & inp = UA_PK_NOK: NO_CONN;
state = s15 & inp = KEX30: KEX31_NEWKEYS;
state = s15 & inp = SR_AUTH: NO_CONN;
state = s15 & inp = SR_CONN: NO_CONN;
state = s15 & inp = NEWKEYS: UNIMPL;
state = s15 & inp = CH_REQUEST_PTY: NO_CONN;
state = s15 & inp = CH_OPEN: CH_MAX;
state = s15 & inp = CH_DATA: NO_CONN;
state = s15 & inp = UA_PK_OK: NO_CONN;
state = s15 & inp = KEXINIT_PROCEED: NO_CONN;
state = s15 & inp = CH_CLOSE: NO_CONN;
state = s15 & inp = KEXINIT: NO_CONN;
state = s15 & inp = CH_EOF: NO_CONN;
state = s16 & inp = UA_PK_NOK: NO_CONN;
state = s16 & inp = KEX30: NO_RESP;
state = s16 & inp = SR_AUTH: NO_CONN;
state = s16 & inp = SR_CONN: NO_CONN;
state = s16 & inp = NEWKEYS: UNIMPL;
state = s16 & inp = CH_REQUEST_PTY: NO_CONN;
state = s16 & inp = CH_OPEN: CH_MAX;
state = s16 & inp = CH_DATA: NO_CONN;
state = s16 & inp = UA_PK_OK: NO_CONN;
state = s16 & inp = KEXINIT_PROCEED: NO_CONN;
state = s16 & inp = CH_CLOSE: NO_CONN;
state = s16 & inp = KEXINIT: NO_CONN;
state = s16 & inp = CH_EOF: NO_CONN;
state = s17 & inp = UA_PK_NOK: NO_RESP;
state = s17 & inp = KEX30: NO_CONN;
state = s17 & inp = SR_AUTH: SR_ACCEPT;
state = s17 & inp = SR_CONN: SR_ACCEPT;
state = s17 & inp = NEWKEYS: NO_CONN;
state = s17 & inp = CH_REQUEST_PTY: NO_CONN;
state = s17 & inp = CH_OPEN: CH_MAX;
state = s17 & inp = CH_DATA: NO_RESP;
state = s17 & inp = UA_PK_OK: NO_RESP;
state = s17 & inp = KEXINIT_PROCEED: KEXINIT;
state = s17 & inp = CH_CLOSE: CH_EOF;
state = s17 & inp = KEXINIT: KEXINIT;
state = s17 & inp = CH_EOF: CH_EOF;
state = s18 & inp = UA_PK_NOK: NO_CONN;
state = s18 & inp = KEX30: KEX31_NEWKEYS;
state = s18 & inp = SR_AUTH: NO_CONN;
state = s18 & inp = SR_CONN: NO_CONN;
state = s18 & inp = NEWKEYS: UNIMPL;
state = s18 & inp = CH_REQUEST_PTY: NO_CONN;
state = s18 & inp = CH_OPEN: CH_MAX;
state = s18 & inp = CH_DATA: NO_CONN;
state = s18 & inp = UA_PK_OK: NO_CONN;
state = s18 & inp = KEXINIT_PROCEED: NO_CONN;
state = s18 & inp = CH_CLOSE: NO_CONN;
state = s18 & inp = KEXINIT: NO_CONN;
state = s18 & inp = CH_EOF: NO_CONN;
state = s19 & inp = UA_PK_NOK: NO_RESP;
state = s19 & inp = KEX30: NO_CONN;
state = s19 & inp = SR_AUTH: SR_ACCEPT;
state = s19 & inp = SR_CONN: SR_ACCEPT;
state = s19 & inp = NEWKEYS: NO_CONN;
state = s19 & inp = CH_REQUEST_PTY: NO_CONN;
state = s19 & inp = CH_OPEN: CH_MAX;
state = s19 & inp = CH_DATA: NO_CONN;
state = s19 & inp = UA_PK_OK: NO_RESP;
state = s19 & inp = KEXINIT_PROCEED: KEXINIT;
state = s19 & inp = CH_CLOSE: NO_RESP;
state = s19 & inp = KEXINIT: KEXINIT;
state = s19 & inp = CH_EOF: NO_RESP;
state = s20 & inp = UA_PK_NOK: NO_CONN;
state = s20 & inp = KEX30: NO_RESP;
state = s20 & inp = SR_AUTH: NO_CONN;
state = s20 & inp = SR_CONN: NO_CONN;
state = s20 & inp = NEWKEYS: UNIMPL;
state = s20 & inp = CH_REQUEST_PTY: NO_CONN;
state = s20 & inp = CH_OPEN: CH_MAX;
state = s20 & inp = CH_DATA: NO_CONN;
state = s20 & inp = UA_PK_OK: NO_CONN;
state = s20 & inp = KEXINIT_PROCEED: NO_CONN;
state = s20 & inp = CH_CLOSE: NO_CONN;
state = s20 & inp = KEXINIT: NO_CONN;
state = s20 & inp = CH_EOF: NO_CONN;
state = s21 & inp = UA_PK_NOK: NO_CONN;
state = s21 & inp = KEX30: UNIMPL;
state = s21 & inp = SR_AUTH: NO_CONN;
state = s21 & inp = SR_CONN: NO_CONN;
state = s21 & inp = NEWKEYS: NO_RESP;
state = s21 & inp = CH_REQUEST_PTY: NO_CONN;
state = s21 & inp = CH_OPEN: CH_MAX;
state = s21 & inp = CH_DATA: NO_CONN;
state = s21 & inp = UA_PK_OK: NO_CONN;
state = s21 & inp = KEXINIT_PROCEED: NO_CONN;
state = s21 & inp = CH_CLOSE: NO_CONN;
state = s21 & inp = KEXINIT: NO_CONN;
state = s21 & inp = CH_EOF: NO_CONN;
state = s22 & inp = UA_PK_NOK: NO_CONN;
state = s22 & inp = KEX30: NO_RESP;
state = s22 & inp = SR_AUTH: NO_CONN;
state = s22 & inp = SR_CONN: NO_CONN;
state = s22 & inp = NEWKEYS: UNIMPL;
state = s22 & inp = CH_REQUEST_PTY: NO_CONN;
state = s22 & inp = CH_OPEN: CH_MAX;
state = s22 & inp = CH_DATA: NO_CONN;
state = s22 & inp = UA_PK_OK: NO_CONN;
state = s22 & inp = KEXINIT_PROCEED: NO_CONN;
state = s22 & inp = CH_CLOSE: NO_CONN;
state = s22 & inp = KEXINIT: NO_CONN;
state = s22 & inp = CH_EOF: NO_CONN;
state = s23 & inp = UA_PK_NOK: NO_CONN;
state = s23 & inp = KEX30: KEX31_NEWKEYS;
state = s23 & inp = SR_AUTH: NO_CONN;
state = s23 & inp = SR_CONN: NO_CONN;
state = s23 & inp = NEWKEYS: UNIMPL;
state = s23 & inp = CH_REQUEST_PTY: NO_CONN;
state = s23 & inp = CH_OPEN: CH_MAX;
state = s23 & inp = CH_DATA: NO_CONN;
state = s23 & inp = UA_PK_OK: NO_CONN;
state = s23 & inp = KEXINIT_PROCEED: NO_CONN;
state = s23 & inp = CH_CLOSE: NO_CONN;
state = s23 & inp = KEXINIT: NO_CONN;
state = s23 & inp = CH_EOF: NO_CONN;
state = s24 & inp = UA_PK_NOK: NO_CONN;
state = s24 & inp = KEX30: UNIMPL;
state = s24 & inp = SR_AUTH: NO_CONN;
state = s24 & inp = SR_CONN: NO_CONN;
state = s24 & inp = NEWKEYS: NO_RESP;
state = s24 & inp = CH_REQUEST_PTY: NO_CONN;
state = s24 & inp = CH_OPEN: CH_MAX;
state = s24 & inp = CH_DATA: NO_CONN;
state = s24 & inp = UA_PK_OK: NO_CONN;
state = s24 & inp = KEXINIT_PROCEED: NO_CONN;
state = s24 & inp = CH_CLOSE: NO_CONN;
state = s24 & inp = KEXINIT: NO_CONN;
state = s24 & inp = CH_EOF: NO_CONN;
state = s25 & inp = UA_PK_NOK: NO_CONN;
state = s25 & inp = KEX30: NO_RESP;
state = s25 & inp = SR_AUTH: NO_CONN;
state = s25 & inp = SR_CONN: NO_CONN;
state = s25 & inp = NEWKEYS: UNIMPL;
state = s25 & inp = CH_REQUEST_PTY: NO_CONN;
state = s25 & inp = CH_OPEN: CH_MAX;
state = s25 & inp = CH_DATA: NO_CONN;
state = s25 & inp = UA_PK_OK: NO_CONN;
state = s25 & inp = KEXINIT_PROCEED: NO_CONN;
state = s25 & inp = CH_CLOSE: NO_CONN;
state = s25 & inp = KEXINIT: NO_CONN;
state = s25 & inp = CH_EOF: NO_CONN;
state = s26 & inp = UA_PK_NOK: NO_CONN;
state = s26 & inp = KEX30: KEX31_NEWKEYS;
state = s26 & inp = SR_AUTH: NO_CONN;
state = s26 & inp = SR_CONN: NO_CONN;
state = s26 & inp = NEWKEYS: UNIMPL;
state = s26 & inp = CH_REQUEST_PTY: NO_CONN;
state = s26 & inp = CH_OPEN: CH_MAX;
state = s26 & inp = CH_DATA: NO_CONN;
state = s26 & inp = UA_PK_OK: NO_CONN;
state = s26 & inp = KEXINIT_PROCEED: NO_CONN;
state = s26 & inp = CH_CLOSE: NO_CONN;
state = s26 & inp = KEXINIT: NO_CONN;
state = s26 & inp = CH_EOF: NO_CONN;
state = s27 & inp = UA_PK_NOK: NO_CONN;
state = s27 & inp = KEX30: UNIMPL;
state = s27 & inp = SR_AUTH: NO_CONN;
state = s27 & inp = SR_CONN: NO_CONN;
state = s27 & inp = NEWKEYS: NO_RESP;
state = s27 & inp = CH_REQUEST_PTY: NO_CONN;
state = s27 & inp = CH_OPEN: CH_MAX;
state = s27 & inp = CH_DATA: NO_CONN;
state = s27 & inp = UA_PK_OK: NO_CONN;
state = s27 & inp = KEXINIT_PROCEED: NO_CONN;
state = s27 & inp = CH_CLOSE: NO_CONN;
state = s27 & inp = KEXINIT: NO_CONN;
state = s27 & inp = CH_EOF: NO_CONN;
state = s28 & inp = UA_PK_NOK: NO_CONN;
state = s28 & inp = KEX30: UNIMPL;
state = s28 & inp = SR_AUTH: NO_CONN;
state = s28 & inp = SR_CONN: NO_CONN;
state = s28 & inp = NEWKEYS: NO_RESP;
state = s28 & inp = CH_REQUEST_PTY: NO_CONN;
state = s28 & inp = CH_OPEN: CH_MAX;
state = s28 & inp = CH_DATA: NO_CONN;
state = s28 & inp = UA_PK_OK: NO_CONN;
state = s28 & inp = KEXINIT_PROCEED: NO_CONN;
state = s28 & inp = CH_CLOSE: NO_CONN;
state = s28 & inp = KEXINIT: NO_CONN;
state = s28 & inp = CH_EOF: NO_CONN;
esac;
DEFINE isSilent := (out=NO_CONN);
DEFINE hasReqAuth := (inp=SR_AUTH & out=SR_ACCEPT);
DEFINE hasAuth := (out=UA_PW_OK);
DEFINE authReq := (inp=UA_PW_OK | inp=UA_PW_NOK);
DEFINE validAuthReq := (inp=UA_PW_OK);
DEFINE invalidAuthReq := (inp=UA_PW_NOK);
DEFINE receivedNewKeys := (out=NEWKEYS | out=KEX31_NEWKEYS);
DEFINE kexStarted := (out=KEXINIT);
-- DEFINE connLost:= out=NO_CONN | out=DISCONNECT;
DEFINE connLost:= out=NO_CONN;


-- General Properties
-- Once a connection is lost, it is lost for good
LTLSPEC NAME gen_one_conn := G (out=NO_CONN ->
    G isSilent)
    

    
-- Security Properties
-- Transport Layer Security
LTLSPEC NAME trans_sec := G ( hasReqAuth -> 
    O ( (inp=NEWKEYS & out=NO_RESP) & 
        O ( (inp=KEX30 & out=KEX31_NEWKEYS) & 
            O kexStarted ) ) )
            

-- Rekey properties
-- Pre-auth rekey is possible
LTLSPEC NAME pre-auth_rekey_pos := G ( hasReqAuth -> 
         X (inp=KEXINIT -> out=KEXINIT & X ( inp=KEX30 -> out=KEX31_NEWKEYS & X (inp=NEWKEYS -> out=NO_RESP) ) ) U 
         (connLost | hasAuth | kexStarted) | G X (inp=KEXINIT -> out=KEXINIT & X ( inp=KEX30 -> out=KEX31_NEWKEYS & X (inp=NEWKEYS -> out=NO_RESP) ) ) ) 


-- Functional Properties
--   Server sends DISCONNECT:    
--   The sender MUST NOT send or receive any data after this message, and
--   the recipient MUST NOT accept any data after receiving this message.
LTLSPEC NAME trans_disc := G (out=NO_CONN -> 
    X G (isSilent) )

---- After sending a KEXINIT, the other side should not send another KEXINIT or SR_ACCEPT until it has sent NEWKEYS        
LTLSPEC NAME trans_kexinit := G ( kexStarted -> 
    X ( ( (out!=SR_ACCEPT & !kexStarted) U receivedNewKeys |
    G (out!=SR_ACCEPT & !kexStarted) ) ) )
    
-- If the server rejects the service request, it SHOULD send an
-- appropriate SSH_MSG_DISCONNECT message and MUST disconnect. 
LTLSPEC NAME trans_sr := G ( (inp=SR_AUTH & out!=NO_CONN & state!=s0) -> 
    (out=SR_ACCEPT | out=NO_CONN ) )
    
-- If the server rejects the authentication request, it MUST respond
-- with the following: SSH_MSG_USERAUTH_FAILURE. *It may also disconnect on failed unauth attempts
LTLSPEC NAME auth_ua_pre := G ( (hasReqAuth & !O out=UA_SUCCESS_GLOBAL_REQUEST) ->
    ( (invalidAuthReq -> (out=UA_FAILURE) ) U (out=UA_SUCCESS_GLOBAL_REQUEST | connLost| kexStarted ) ) | G (invalidAuthReq -> (out=UA_FAILURE | out=NO_CONN) ) )

-- SSH_MSG_USERAUTH_SUCCESS MUST be sent only once. 
LTLSPEC NAME auth_ua_post := G ( (out=UA_SUCCESS_GLOBAL_REQUEST) ->
    X G (out!=UA_SUCCESS_GLOBAL_REQUEST) )

-- When SSH_MSG_USERAUTH_SUCCESS has been sent, any further authentication
-- requests received after that SHOULD be silently ignored. *openssh sends UNIMPL, is that bad?    
LTLSPEC NAME auth_ua_post_strong := G (out=UA_SUCCESS_GLOBAL_REQUEST ->
     X ( ( authReq -> out=NO_RESP) U (!authReq & (kexStarted | connLost) ) | G (authReq -> out=NO_RESP) ) ) 